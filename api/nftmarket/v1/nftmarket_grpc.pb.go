// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.17.3
// source: nftmarket/v1/nftmarket.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Nftmarket_GetNFTMetadata_FullMethodName = "/api.nftmarket.v1.Nftmarket/GetNFTMetadata"
	Nftmarket_ListedPage_FullMethodName     = "/api.nftmarket.v1.Nftmarket/ListedPage"
)

// NftmarketClient is the client API for Nftmarket service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type NftmarketClient interface {
	GetNFTMetadata(ctx context.Context, in *GetNFTMetadataRequest, opts ...grpc.CallOption) (*GetNFTMetadataReply, error)
	ListedPage(ctx context.Context, in *ListedPageRequest, opts ...grpc.CallOption) (*ListedPageReply, error)
}

type nftmarketClient struct {
	cc grpc.ClientConnInterface
}

func NewNftmarketClient(cc grpc.ClientConnInterface) NftmarketClient {
	return &nftmarketClient{cc}
}

func (c *nftmarketClient) GetNFTMetadata(ctx context.Context, in *GetNFTMetadataRequest, opts ...grpc.CallOption) (*GetNFTMetadataReply, error) {
	out := new(GetNFTMetadataReply)
	err := c.cc.Invoke(ctx, Nftmarket_GetNFTMetadata_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nftmarketClient) ListedPage(ctx context.Context, in *ListedPageRequest, opts ...grpc.CallOption) (*ListedPageReply, error) {
	out := new(ListedPageReply)
	err := c.cc.Invoke(ctx, Nftmarket_ListedPage_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// NftmarketServer is the server API for Nftmarket service.
// All implementations must embed UnimplementedNftmarketServer
// for forward compatibility
type NftmarketServer interface {
	GetNFTMetadata(context.Context, *GetNFTMetadataRequest) (*GetNFTMetadataReply, error)
	ListedPage(context.Context, *ListedPageRequest) (*ListedPageReply, error)
	mustEmbedUnimplementedNftmarketServer()
}

// UnimplementedNftmarketServer must be embedded to have forward compatible implementations.
type UnimplementedNftmarketServer struct {
}

func (UnimplementedNftmarketServer) GetNFTMetadata(context.Context, *GetNFTMetadataRequest) (*GetNFTMetadataReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetNFTMetadata not implemented")
}
func (UnimplementedNftmarketServer) ListedPage(context.Context, *ListedPageRequest) (*ListedPageReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListedPage not implemented")
}
func (UnimplementedNftmarketServer) mustEmbedUnimplementedNftmarketServer() {}

// UnsafeNftmarketServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to NftmarketServer will
// result in compilation errors.
type UnsafeNftmarketServer interface {
	mustEmbedUnimplementedNftmarketServer()
}

func RegisterNftmarketServer(s grpc.ServiceRegistrar, srv NftmarketServer) {
	s.RegisterService(&Nftmarket_ServiceDesc, srv)
}

func _Nftmarket_GetNFTMetadata_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetNFTMetadataRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NftmarketServer).GetNFTMetadata(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Nftmarket_GetNFTMetadata_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NftmarketServer).GetNFTMetadata(ctx, req.(*GetNFTMetadataRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Nftmarket_ListedPage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListedPageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NftmarketServer).ListedPage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Nftmarket_ListedPage_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NftmarketServer).ListedPage(ctx, req.(*ListedPageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Nftmarket_ServiceDesc is the grpc.ServiceDesc for Nftmarket service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Nftmarket_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.nftmarket.v1.Nftmarket",
	HandlerType: (*NftmarketServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetNFTMetadata",
			Handler:    _Nftmarket_GetNFTMetadata_Handler,
		},
		{
			MethodName: "ListedPage",
			Handler:    _Nftmarket_ListedPage_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "nftmarket/v1/nftmarket.proto",
}
