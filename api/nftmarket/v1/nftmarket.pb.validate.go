// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: nftmarket/v1/nftmarket.proto

package v1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on GetNFTMetadataRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetNFTMetadataRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetNFTMetadataRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetNFTMetadataRequestMultiError, or nil if none found.
func (m *GetNFTMetadataRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetNFTMetadataRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetNftAddress()) < 1 {
		err := GetNFTMetadataRequestValidationError{
			field:  "NftAddress",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetTokenId()) < 1 {
		err := GetNFTMetadataRequestValidationError{
			field:  "TokenId",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetChainId()) < 1 {
		err := GetNFTMetadataRequestValidationError{
			field:  "ChainId",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return GetNFTMetadataRequestMultiError(errors)
	}

	return nil
}

// GetNFTMetadataRequestMultiError is an error wrapping multiple validation
// errors returned by GetNFTMetadataRequest.ValidateAll() if the designated
// constraints aren't met.
type GetNFTMetadataRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetNFTMetadataRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetNFTMetadataRequestMultiError) AllErrors() []error { return m }

// GetNFTMetadataRequestValidationError is the validation error returned by
// GetNFTMetadataRequest.Validate if the designated constraints aren't met.
type GetNFTMetadataRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetNFTMetadataRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetNFTMetadataRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetNFTMetadataRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetNFTMetadataRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetNFTMetadataRequestValidationError) ErrorName() string {
	return "GetNFTMetadataRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetNFTMetadataRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetNFTMetadataRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetNFTMetadataRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetNFTMetadataRequestValidationError{}

// Validate checks the field values on GetNFTMetadataReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetNFTMetadataReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetNFTMetadataReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetNFTMetadataReplyMultiError, or nil if none found.
func (m *GetNFTMetadataReply) ValidateAll() error {
	return m.validate(true)
}

func (m *GetNFTMetadataReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Code

	if all {
		switch v := interface{}(m.GetData()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetNFTMetadataReplyValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetNFTMetadataReplyValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetNFTMetadataReplyValidationError{
				field:  "Data",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Msg

	if len(errors) > 0 {
		return GetNFTMetadataReplyMultiError(errors)
	}

	return nil
}

// GetNFTMetadataReplyMultiError is an error wrapping multiple validation
// errors returned by GetNFTMetadataReply.ValidateAll() if the designated
// constraints aren't met.
type GetNFTMetadataReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetNFTMetadataReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetNFTMetadataReplyMultiError) AllErrors() []error { return m }

// GetNFTMetadataReplyValidationError is the validation error returned by
// GetNFTMetadataReply.Validate if the designated constraints aren't met.
type GetNFTMetadataReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetNFTMetadataReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetNFTMetadataReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetNFTMetadataReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetNFTMetadataReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetNFTMetadataReplyValidationError) ErrorName() string {
	return "GetNFTMetadataReplyValidationError"
}

// Error satisfies the builtin error interface
func (e GetNFTMetadataReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetNFTMetadataReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetNFTMetadataReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetNFTMetadataReplyValidationError{}

// Validate checks the field values on ListedPageRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *ListedPageRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListedPageRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListedPageRequestMultiError, or nil if none found.
func (m *ListedPageRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListedPageRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetPage() <= 0 {
		err := ListedPageRequestValidationError{
			field:  "Page",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetPageSize() <= 0 {
		err := ListedPageRequestValidationError{
			field:  "PageSize",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return ListedPageRequestMultiError(errors)
	}

	return nil
}

// ListedPageRequestMultiError is an error wrapping multiple validation errors
// returned by ListedPageRequest.ValidateAll() if the designated constraints
// aren't met.
type ListedPageRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListedPageRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListedPageRequestMultiError) AllErrors() []error { return m }

// ListedPageRequestValidationError is the validation error returned by
// ListedPageRequest.Validate if the designated constraints aren't met.
type ListedPageRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListedPageRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListedPageRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListedPageRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListedPageRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListedPageRequestValidationError) ErrorName() string {
	return "ListedPageRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListedPageRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListedPageRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListedPageRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListedPageRequestValidationError{}

// Validate checks the field values on ListedPageReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *ListedPageReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListedPageReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListedPageReplyMultiError, or nil if none found.
func (m *ListedPageReply) ValidateAll() error {
	return m.validate(true)
}

func (m *ListedPageReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Code

	for idx, item := range m.GetData() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListedPageReplyValidationError{
						field:  fmt.Sprintf("Data[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListedPageReplyValidationError{
						field:  fmt.Sprintf("Data[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListedPageReplyValidationError{
					field:  fmt.Sprintf("Data[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for Msg

	if len(errors) > 0 {
		return ListedPageReplyMultiError(errors)
	}

	return nil
}

// ListedPageReplyMultiError is an error wrapping multiple validation errors
// returned by ListedPageReply.ValidateAll() if the designated constraints
// aren't met.
type ListedPageReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListedPageReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListedPageReplyMultiError) AllErrors() []error { return m }

// ListedPageReplyValidationError is the validation error returned by
// ListedPageReply.Validate if the designated constraints aren't met.
type ListedPageReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListedPageReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListedPageReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListedPageReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListedPageReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListedPageReplyValidationError) ErrorName() string { return "ListedPageReplyValidationError" }

// Error satisfies the builtin error interface
func (e ListedPageReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListedPageReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListedPageReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListedPageReplyValidationError{}

// Validate checks the field values on SelfPageRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *SelfPageRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SelfPageRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SelfPageRequestMultiError, or nil if none found.
func (m *SelfPageRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *SelfPageRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetPage() <= 0 {
		err := SelfPageRequestValidationError{
			field:  "Page",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetPageSize() <= 0 {
		err := SelfPageRequestValidationError{
			field:  "PageSize",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for NftAddress

	if utf8.RuneCountInString(m.GetOwner()) < 1 {
		err := SelfPageRequestValidationError{
			field:  "Owner",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetChainId()) < 1 {
		err := SelfPageRequestValidationError{
			field:  "ChainId",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return SelfPageRequestMultiError(errors)
	}

	return nil
}

// SelfPageRequestMultiError is an error wrapping multiple validation errors
// returned by SelfPageRequest.ValidateAll() if the designated constraints
// aren't met.
type SelfPageRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SelfPageRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SelfPageRequestMultiError) AllErrors() []error { return m }

// SelfPageRequestValidationError is the validation error returned by
// SelfPageRequest.Validate if the designated constraints aren't met.
type SelfPageRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SelfPageRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SelfPageRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SelfPageRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SelfPageRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SelfPageRequestValidationError) ErrorName() string { return "SelfPageRequestValidationError" }

// Error satisfies the builtin error interface
func (e SelfPageRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSelfPageRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SelfPageRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SelfPageRequestValidationError{}

// Validate checks the field values on SelfPageReply with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *SelfPageReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SelfPageReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in SelfPageReplyMultiError, or
// nil if none found.
func (m *SelfPageReply) ValidateAll() error {
	return m.validate(true)
}

func (m *SelfPageReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Code

	for idx, item := range m.GetData() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, SelfPageReplyValidationError{
						field:  fmt.Sprintf("Data[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, SelfPageReplyValidationError{
						field:  fmt.Sprintf("Data[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return SelfPageReplyValidationError{
					field:  fmt.Sprintf("Data[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for Msg

	if len(errors) > 0 {
		return SelfPageReplyMultiError(errors)
	}

	return nil
}

// SelfPageReplyMultiError is an error wrapping multiple validation errors
// returned by SelfPageReply.ValidateAll() if the designated constraints
// aren't met.
type SelfPageReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SelfPageReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SelfPageReplyMultiError) AllErrors() []error { return m }

// SelfPageReplyValidationError is the validation error returned by
// SelfPageReply.Validate if the designated constraints aren't met.
type SelfPageReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SelfPageReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SelfPageReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SelfPageReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SelfPageReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SelfPageReplyValidationError) ErrorName() string { return "SelfPageReplyValidationError" }

// Error satisfies the builtin error interface
func (e SelfPageReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSelfPageReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SelfPageReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SelfPageReplyValidationError{}

// Validate checks the field values on ListedPageReply_NftItem with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListedPageReply_NftItem) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListedPageReply_NftItem with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListedPageReply_NftItemMultiError, or nil if none found.
func (m *ListedPageReply_NftItem) ValidateAll() error {
	return m.validate(true)
}

func (m *ListedPageReply_NftItem) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for ChainId

	// no validation rules for MarketPlaceAddress

	// no validation rules for Seller

	// no validation rules for NftAddress

	// no validation rules for TokenId

	// no validation rules for Price

	// no validation rules for ListedTime

	// no validation rules for UpdateTime

	if len(errors) > 0 {
		return ListedPageReply_NftItemMultiError(errors)
	}

	return nil
}

// ListedPageReply_NftItemMultiError is an error wrapping multiple validation
// errors returned by ListedPageReply_NftItem.ValidateAll() if the designated
// constraints aren't met.
type ListedPageReply_NftItemMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListedPageReply_NftItemMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListedPageReply_NftItemMultiError) AllErrors() []error { return m }

// ListedPageReply_NftItemValidationError is the validation error returned by
// ListedPageReply_NftItem.Validate if the designated constraints aren't met.
type ListedPageReply_NftItemValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListedPageReply_NftItemValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListedPageReply_NftItemValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListedPageReply_NftItemValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListedPageReply_NftItemValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListedPageReply_NftItemValidationError) ErrorName() string {
	return "ListedPageReply_NftItemValidationError"
}

// Error satisfies the builtin error interface
func (e ListedPageReply_NftItemValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListedPageReply_NftItem.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListedPageReply_NftItemValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListedPageReply_NftItemValidationError{}
