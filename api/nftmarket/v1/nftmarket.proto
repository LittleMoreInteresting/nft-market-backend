syntax = "proto3";

package api.nftmarket.v1;

option go_package = "nft-market-backend/api/nftmarket/v1;v1";
option java_multiple_files = true;
option java_package = "api.nftmarket.v1";
import "google/api/annotations.proto";
import "google/protobuf/struct.proto";
import "validate/validate.proto";
service Nftmarket {
	rpc GetNFTMetadata (GetNFTMetadataRequest) returns (GetNFTMetadataReply){
		option (google.api.http) = {
			get: "/nft/metaData/getNFTMetadata",
		};
	}
	rpc ListedPage (ListedPageRequest) returns (ListedPageReply){
		option (google.api.http) = {
			get: "/nft/listed/listedPage",
		};
	}
	rpc SelfPage (SelfPageRequest) returns (SelfPageReply){
		option (google.api.http) = {
			get: "/nft/self-page/list",
		};
	}
}

message GetNFTMetadataRequest {
		string nftAddress = 1 [(validate.rules).string = {min_len: 1}];
		string tokenId = 2 [(validate.rules).string = {min_len: 1}];
		string chainId = 3 [(validate.rules).string = {min_len: 1}];
}
message GetNFTMetadataReply {
	int32 code = 1;
	google.protobuf.Struct data = 2;
	string msg = 3;
}

message ListedPageRequest {
	int64 page = 1 [(validate.rules).int64 = {gt: 0}];
	int64 pageSize = 2 [(validate.rules).int64 = {gt: 0}];
}

message ListedPageReply {
	message NftItem {
		string id =1;
		string chainId = 2;
		string marketPlaceAddress = 3;
		string seller = 4;
		string nftAddress = 5;
		string tokenId = 6;
		string price = 7;
		int64 listedTime = 8;
		int64 updateTime = 9;
	}
	int32 code = 1;
	repeated NftItem data = 2;
	string msg = 3;
}

message SelfPageRequest {
	int64 page = 1 [(validate.rules).int64 = {gt: 0}];
	int64 pageSize = 2 [(validate.rules).int64 = {gt: 0}];
	string nftAddress = 3 ;
	string owner = 4 [(validate.rules).string = {min_len: 1}];
	string chainId = 5 [(validate.rules).string = {min_len: 1}];
}
message SelfPageReply {
	int32 code = 1;
	repeated google.protobuf.Struct data = 2;
	string msg = 3;
}