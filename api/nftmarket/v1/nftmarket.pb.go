// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.32.0
// 	protoc        v3.17.3
// source: nftmarket/v1/nftmarket.proto

package v1

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type CreateNftmarketRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *CreateNftmarketRequest) Reset() {
	*x = CreateNftmarketRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_nftmarket_v1_nftmarket_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateNftmarketRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateNftmarketRequest) ProtoMessage() {}

func (x *CreateNftmarketRequest) ProtoReflect() protoreflect.Message {
	mi := &file_nftmarket_v1_nftmarket_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateNftmarketRequest.ProtoReflect.Descriptor instead.
func (*CreateNftmarketRequest) Descriptor() ([]byte, []int) {
	return file_nftmarket_v1_nftmarket_proto_rawDescGZIP(), []int{0}
}

type CreateNftmarketReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *CreateNftmarketReply) Reset() {
	*x = CreateNftmarketReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_nftmarket_v1_nftmarket_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateNftmarketReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateNftmarketReply) ProtoMessage() {}

func (x *CreateNftmarketReply) ProtoReflect() protoreflect.Message {
	mi := &file_nftmarket_v1_nftmarket_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateNftmarketReply.ProtoReflect.Descriptor instead.
func (*CreateNftmarketReply) Descriptor() ([]byte, []int) {
	return file_nftmarket_v1_nftmarket_proto_rawDescGZIP(), []int{1}
}

type UpdateNftmarketRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *UpdateNftmarketRequest) Reset() {
	*x = UpdateNftmarketRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_nftmarket_v1_nftmarket_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateNftmarketRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateNftmarketRequest) ProtoMessage() {}

func (x *UpdateNftmarketRequest) ProtoReflect() protoreflect.Message {
	mi := &file_nftmarket_v1_nftmarket_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateNftmarketRequest.ProtoReflect.Descriptor instead.
func (*UpdateNftmarketRequest) Descriptor() ([]byte, []int) {
	return file_nftmarket_v1_nftmarket_proto_rawDescGZIP(), []int{2}
}

type UpdateNftmarketReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *UpdateNftmarketReply) Reset() {
	*x = UpdateNftmarketReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_nftmarket_v1_nftmarket_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateNftmarketReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateNftmarketReply) ProtoMessage() {}

func (x *UpdateNftmarketReply) ProtoReflect() protoreflect.Message {
	mi := &file_nftmarket_v1_nftmarket_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateNftmarketReply.ProtoReflect.Descriptor instead.
func (*UpdateNftmarketReply) Descriptor() ([]byte, []int) {
	return file_nftmarket_v1_nftmarket_proto_rawDescGZIP(), []int{3}
}

type DeleteNftmarketRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *DeleteNftmarketRequest) Reset() {
	*x = DeleteNftmarketRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_nftmarket_v1_nftmarket_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteNftmarketRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteNftmarketRequest) ProtoMessage() {}

func (x *DeleteNftmarketRequest) ProtoReflect() protoreflect.Message {
	mi := &file_nftmarket_v1_nftmarket_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteNftmarketRequest.ProtoReflect.Descriptor instead.
func (*DeleteNftmarketRequest) Descriptor() ([]byte, []int) {
	return file_nftmarket_v1_nftmarket_proto_rawDescGZIP(), []int{4}
}

type DeleteNftmarketReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *DeleteNftmarketReply) Reset() {
	*x = DeleteNftmarketReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_nftmarket_v1_nftmarket_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteNftmarketReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteNftmarketReply) ProtoMessage() {}

func (x *DeleteNftmarketReply) ProtoReflect() protoreflect.Message {
	mi := &file_nftmarket_v1_nftmarket_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteNftmarketReply.ProtoReflect.Descriptor instead.
func (*DeleteNftmarketReply) Descriptor() ([]byte, []int) {
	return file_nftmarket_v1_nftmarket_proto_rawDescGZIP(), []int{5}
}

type GetNftmarketRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *GetNftmarketRequest) Reset() {
	*x = GetNftmarketRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_nftmarket_v1_nftmarket_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetNftmarketRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetNftmarketRequest) ProtoMessage() {}

func (x *GetNftmarketRequest) ProtoReflect() protoreflect.Message {
	mi := &file_nftmarket_v1_nftmarket_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetNftmarketRequest.ProtoReflect.Descriptor instead.
func (*GetNftmarketRequest) Descriptor() ([]byte, []int) {
	return file_nftmarket_v1_nftmarket_proto_rawDescGZIP(), []int{6}
}

type GetNftmarketReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *GetNftmarketReply) Reset() {
	*x = GetNftmarketReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_nftmarket_v1_nftmarket_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetNftmarketReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetNftmarketReply) ProtoMessage() {}

func (x *GetNftmarketReply) ProtoReflect() protoreflect.Message {
	mi := &file_nftmarket_v1_nftmarket_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetNftmarketReply.ProtoReflect.Descriptor instead.
func (*GetNftmarketReply) Descriptor() ([]byte, []int) {
	return file_nftmarket_v1_nftmarket_proto_rawDescGZIP(), []int{7}
}

type ListNftmarketRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ListNftmarketRequest) Reset() {
	*x = ListNftmarketRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_nftmarket_v1_nftmarket_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListNftmarketRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListNftmarketRequest) ProtoMessage() {}

func (x *ListNftmarketRequest) ProtoReflect() protoreflect.Message {
	mi := &file_nftmarket_v1_nftmarket_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListNftmarketRequest.ProtoReflect.Descriptor instead.
func (*ListNftmarketRequest) Descriptor() ([]byte, []int) {
	return file_nftmarket_v1_nftmarket_proto_rawDescGZIP(), []int{8}
}

type ListNftmarketReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ListNftmarketReply) Reset() {
	*x = ListNftmarketReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_nftmarket_v1_nftmarket_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListNftmarketReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListNftmarketReply) ProtoMessage() {}

func (x *ListNftmarketReply) ProtoReflect() protoreflect.Message {
	mi := &file_nftmarket_v1_nftmarket_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListNftmarketReply.ProtoReflect.Descriptor instead.
func (*ListNftmarketReply) Descriptor() ([]byte, []int) {
	return file_nftmarket_v1_nftmarket_proto_rawDescGZIP(), []int{9}
}

var File_nftmarket_v1_nftmarket_proto protoreflect.FileDescriptor

var file_nftmarket_v1_nftmarket_proto_rawDesc = []byte{
	0x0a, 0x1c, 0x6e, 0x66, 0x74, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x2f, 0x76, 0x31, 0x2f, 0x6e,
	0x66, 0x74, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x10,
	0x61, 0x70, 0x69, 0x2e, 0x6e, 0x66, 0x74, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x2e, 0x76, 0x31,
	0x22, 0x18, 0x0a, 0x16, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4e, 0x66, 0x74, 0x6d, 0x61, 0x72,
	0x6b, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x16, 0x0a, 0x14, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x4e, 0x66, 0x74, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x52, 0x65, 0x70,
	0x6c, 0x79, 0x22, 0x18, 0x0a, 0x16, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4e, 0x66, 0x74, 0x6d,
	0x61, 0x72, 0x6b, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x16, 0x0a, 0x14,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4e, 0x66, 0x74, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x52,
	0x65, 0x70, 0x6c, 0x79, 0x22, 0x18, 0x0a, 0x16, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4e, 0x66,
	0x74, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x16,
	0x0a, 0x14, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4e, 0x66, 0x74, 0x6d, 0x61, 0x72, 0x6b, 0x65,
	0x74, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x15, 0x0a, 0x13, 0x47, 0x65, 0x74, 0x4e, 0x66, 0x74,
	0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x13, 0x0a,
	0x11, 0x47, 0x65, 0x74, 0x4e, 0x66, 0x74, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x52, 0x65, 0x70,
	0x6c, 0x79, 0x22, 0x16, 0x0a, 0x14, 0x4c, 0x69, 0x73, 0x74, 0x4e, 0x66, 0x74, 0x6d, 0x61, 0x72,
	0x6b, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x14, 0x0a, 0x12, 0x4c, 0x69,
	0x73, 0x74, 0x4e, 0x66, 0x74, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x52, 0x65, 0x70, 0x6c, 0x79,
	0x32, 0xf5, 0x03, 0x0a, 0x09, 0x4e, 0x66, 0x74, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x12, 0x63,
	0x0a, 0x0f, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4e, 0x66, 0x74, 0x6d, 0x61, 0x72, 0x6b, 0x65,
	0x74, 0x12, 0x28, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6e, 0x66, 0x74, 0x6d, 0x61, 0x72, 0x6b, 0x65,
	0x74, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4e, 0x66, 0x74, 0x6d, 0x61,
	0x72, 0x6b, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x26, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x6e, 0x66, 0x74, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x4e, 0x66, 0x74, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x52, 0x65,
	0x70, 0x6c, 0x79, 0x12, 0x63, 0x0a, 0x0f, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4e, 0x66, 0x74,
	0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x12, 0x28, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6e, 0x66, 0x74,
	0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x4e, 0x66, 0x74, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x26, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6e, 0x66, 0x74, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74,
	0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4e, 0x66, 0x74, 0x6d, 0x61, 0x72,
	0x6b, 0x65, 0x74, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x63, 0x0a, 0x0f, 0x44, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x4e, 0x66, 0x74, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x12, 0x28, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x6e, 0x66, 0x74, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x44,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x4e, 0x66, 0x74, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x26, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6e, 0x66, 0x74, 0x6d,
	0x61, 0x72, 0x6b, 0x65, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4e,
	0x66, 0x74, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x5a, 0x0a,
	0x0c, 0x47, 0x65, 0x74, 0x4e, 0x66, 0x74, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x12, 0x25, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x6e, 0x66, 0x74, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x2e, 0x76, 0x31,
	0x2e, 0x47, 0x65, 0x74, 0x4e, 0x66, 0x74, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x23, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6e, 0x66, 0x74, 0x6d, 0x61,
	0x72, 0x6b, 0x65, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x4e, 0x66, 0x74, 0x6d, 0x61,
	0x72, 0x6b, 0x65, 0x74, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x5d, 0x0a, 0x0d, 0x4c, 0x69, 0x73,
	0x74, 0x4e, 0x66, 0x74, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x12, 0x26, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x6e, 0x66, 0x74, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69,
	0x73, 0x74, 0x4e, 0x66, 0x74, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x24, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6e, 0x66, 0x74, 0x6d, 0x61, 0x72, 0x6b,
	0x65, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x4e, 0x66, 0x74, 0x6d, 0x61, 0x72,
	0x6b, 0x65, 0x74, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x42, 0x3c, 0x0a, 0x10, 0x61, 0x70, 0x69, 0x2e,
	0x6e, 0x66, 0x74, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x2e, 0x76, 0x31, 0x50, 0x01, 0x5a, 0x26,
	0x6e, 0x66, 0x74, 0x2d, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x2d, 0x62, 0x61, 0x63, 0x6b, 0x65,
	0x6e, 0x64, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x6e, 0x66, 0x74, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74,
	0x2f, 0x76, 0x31, 0x3b, 0x76, 0x31, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_nftmarket_v1_nftmarket_proto_rawDescOnce sync.Once
	file_nftmarket_v1_nftmarket_proto_rawDescData = file_nftmarket_v1_nftmarket_proto_rawDesc
)

func file_nftmarket_v1_nftmarket_proto_rawDescGZIP() []byte {
	file_nftmarket_v1_nftmarket_proto_rawDescOnce.Do(func() {
		file_nftmarket_v1_nftmarket_proto_rawDescData = protoimpl.X.CompressGZIP(file_nftmarket_v1_nftmarket_proto_rawDescData)
	})
	return file_nftmarket_v1_nftmarket_proto_rawDescData
}

var file_nftmarket_v1_nftmarket_proto_msgTypes = make([]protoimpl.MessageInfo, 10)
var file_nftmarket_v1_nftmarket_proto_goTypes = []interface{}{
	(*CreateNftmarketRequest)(nil), // 0: api.nftmarket.v1.CreateNftmarketRequest
	(*CreateNftmarketReply)(nil),   // 1: api.nftmarket.v1.CreateNftmarketReply
	(*UpdateNftmarketRequest)(nil), // 2: api.nftmarket.v1.UpdateNftmarketRequest
	(*UpdateNftmarketReply)(nil),   // 3: api.nftmarket.v1.UpdateNftmarketReply
	(*DeleteNftmarketRequest)(nil), // 4: api.nftmarket.v1.DeleteNftmarketRequest
	(*DeleteNftmarketReply)(nil),   // 5: api.nftmarket.v1.DeleteNftmarketReply
	(*GetNftmarketRequest)(nil),    // 6: api.nftmarket.v1.GetNftmarketRequest
	(*GetNftmarketReply)(nil),      // 7: api.nftmarket.v1.GetNftmarketReply
	(*ListNftmarketRequest)(nil),   // 8: api.nftmarket.v1.ListNftmarketRequest
	(*ListNftmarketReply)(nil),     // 9: api.nftmarket.v1.ListNftmarketReply
}
var file_nftmarket_v1_nftmarket_proto_depIdxs = []int32{
	0, // 0: api.nftmarket.v1.Nftmarket.CreateNftmarket:input_type -> api.nftmarket.v1.CreateNftmarketRequest
	2, // 1: api.nftmarket.v1.Nftmarket.UpdateNftmarket:input_type -> api.nftmarket.v1.UpdateNftmarketRequest
	4, // 2: api.nftmarket.v1.Nftmarket.DeleteNftmarket:input_type -> api.nftmarket.v1.DeleteNftmarketRequest
	6, // 3: api.nftmarket.v1.Nftmarket.GetNftmarket:input_type -> api.nftmarket.v1.GetNftmarketRequest
	8, // 4: api.nftmarket.v1.Nftmarket.ListNftmarket:input_type -> api.nftmarket.v1.ListNftmarketRequest
	1, // 5: api.nftmarket.v1.Nftmarket.CreateNftmarket:output_type -> api.nftmarket.v1.CreateNftmarketReply
	3, // 6: api.nftmarket.v1.Nftmarket.UpdateNftmarket:output_type -> api.nftmarket.v1.UpdateNftmarketReply
	5, // 7: api.nftmarket.v1.Nftmarket.DeleteNftmarket:output_type -> api.nftmarket.v1.DeleteNftmarketReply
	7, // 8: api.nftmarket.v1.Nftmarket.GetNftmarket:output_type -> api.nftmarket.v1.GetNftmarketReply
	9, // 9: api.nftmarket.v1.Nftmarket.ListNftmarket:output_type -> api.nftmarket.v1.ListNftmarketReply
	5, // [5:10] is the sub-list for method output_type
	0, // [0:5] is the sub-list for method input_type
	0, // [0:0] is the sub-list for extension type_name
	0, // [0:0] is the sub-list for extension extendee
	0, // [0:0] is the sub-list for field type_name
}

func init() { file_nftmarket_v1_nftmarket_proto_init() }
func file_nftmarket_v1_nftmarket_proto_init() {
	if File_nftmarket_v1_nftmarket_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_nftmarket_v1_nftmarket_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateNftmarketRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_nftmarket_v1_nftmarket_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateNftmarketReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_nftmarket_v1_nftmarket_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateNftmarketRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_nftmarket_v1_nftmarket_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateNftmarketReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_nftmarket_v1_nftmarket_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteNftmarketRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_nftmarket_v1_nftmarket_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteNftmarketReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_nftmarket_v1_nftmarket_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetNftmarketRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_nftmarket_v1_nftmarket_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetNftmarketReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_nftmarket_v1_nftmarket_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListNftmarketRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_nftmarket_v1_nftmarket_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListNftmarketReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_nftmarket_v1_nftmarket_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   10,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_nftmarket_v1_nftmarket_proto_goTypes,
		DependencyIndexes: file_nftmarket_v1_nftmarket_proto_depIdxs,
		MessageInfos:      file_nftmarket_v1_nftmarket_proto_msgTypes,
	}.Build()
	File_nftmarket_v1_nftmarket_proto = out.File
	file_nftmarket_v1_nftmarket_proto_rawDesc = nil
	file_nftmarket_v1_nftmarket_proto_goTypes = nil
	file_nftmarket_v1_nftmarket_proto_depIdxs = nil
}
