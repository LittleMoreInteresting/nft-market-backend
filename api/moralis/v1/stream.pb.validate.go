// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: moralis/v1/stream.proto

package v1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on ReceiveReply with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ReceiveReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ReceiveReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ReceiveReplyMultiError, or
// nil if none found.
func (m *ReceiveReply) ValidateAll() error {
	return m.validate(true)
}

func (m *ReceiveReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return ReceiveReplyMultiError(errors)
	}

	return nil
}

// ReceiveReplyMultiError is an error wrapping multiple validation errors
// returned by ReceiveReply.ValidateAll() if the designated constraints aren't met.
type ReceiveReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ReceiveReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ReceiveReplyMultiError) AllErrors() []error { return m }

// ReceiveReplyValidationError is the validation error returned by
// ReceiveReply.Validate if the designated constraints aren't met.
type ReceiveReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ReceiveReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ReceiveReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ReceiveReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ReceiveReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ReceiveReplyValidationError) ErrorName() string { return "ReceiveReplyValidationError" }

// Error satisfies the builtin error interface
func (e ReceiveReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sReceiveReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ReceiveReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ReceiveReplyValidationError{}

// Validate checks the field values on ReceiveRequest with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ReceiveRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ReceiveRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ReceiveRequestMultiError,
// or nil if none found.
func (m *ReceiveRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ReceiveRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetNftApprovals()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ReceiveRequestValidationError{
					field:  "NftApprovals",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ReceiveRequestValidationError{
					field:  "NftApprovals",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetNftApprovals()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ReceiveRequestValidationError{
				field:  "NftApprovals",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for StreamId

	for idx, item := range m.GetNftTransfers() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ReceiveRequestValidationError{
						field:  fmt.Sprintf("NftTransfers[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ReceiveRequestValidationError{
						field:  fmt.Sprintf("NftTransfers[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ReceiveRequestValidationError{
					field:  fmt.Sprintf("NftTransfers[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	for idx, item := range m.GetAbi() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ReceiveRequestValidationError{
						field:  fmt.Sprintf("Abi[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ReceiveRequestValidationError{
						field:  fmt.Sprintf("Abi[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ReceiveRequestValidationError{
					field:  fmt.Sprintf("Abi[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	for idx, item := range m.GetTxsInternal() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ReceiveRequestValidationError{
						field:  fmt.Sprintf("TxsInternal[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ReceiveRequestValidationError{
						field:  fmt.Sprintf("TxsInternal[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ReceiveRequestValidationError{
					field:  fmt.Sprintf("TxsInternal[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	for idx, item := range m.GetErc20Approvals() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ReceiveRequestValidationError{
						field:  fmt.Sprintf("Erc20Approvals[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ReceiveRequestValidationError{
						field:  fmt.Sprintf("Erc20Approvals[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ReceiveRequestValidationError{
					field:  fmt.Sprintf("Erc20Approvals[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for Confirmed

	for idx, item := range m.GetTxs() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ReceiveRequestValidationError{
						field:  fmt.Sprintf("Txs[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ReceiveRequestValidationError{
						field:  fmt.Sprintf("Txs[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ReceiveRequestValidationError{
					field:  fmt.Sprintf("Txs[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for Retries

	for idx, item := range m.GetNftTokenApprovals() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ReceiveRequestValidationError{
						field:  fmt.Sprintf("NftTokenApprovals[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ReceiveRequestValidationError{
						field:  fmt.Sprintf("NftTokenApprovals[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ReceiveRequestValidationError{
					field:  fmt.Sprintf("NftTokenApprovals[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for ChainId

	for idx, item := range m.GetNativeBalances() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ReceiveRequestValidationError{
						field:  fmt.Sprintf("NativeBalances[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ReceiveRequestValidationError{
						field:  fmt.Sprintf("NativeBalances[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ReceiveRequestValidationError{
					field:  fmt.Sprintf("NativeBalances[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	for idx, item := range m.GetErc20Transfers() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ReceiveRequestValidationError{
						field:  fmt.Sprintf("Erc20Transfers[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ReceiveRequestValidationError{
						field:  fmt.Sprintf("Erc20Transfers[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ReceiveRequestValidationError{
					field:  fmt.Sprintf("Erc20Transfers[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if all {
		switch v := interface{}(m.GetBlock()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ReceiveRequestValidationError{
					field:  "Block",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ReceiveRequestValidationError{
					field:  "Block",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetBlock()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ReceiveRequestValidationError{
				field:  "Block",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Tag

	for idx, item := range m.GetLogs() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ReceiveRequestValidationError{
						field:  fmt.Sprintf("Logs[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ReceiveRequestValidationError{
						field:  fmt.Sprintf("Logs[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ReceiveRequestValidationError{
					field:  fmt.Sprintf("Logs[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ReceiveRequestMultiError(errors)
	}

	return nil
}

// ReceiveRequestMultiError is an error wrapping multiple validation errors
// returned by ReceiveRequest.ValidateAll() if the designated constraints
// aren't met.
type ReceiveRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ReceiveRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ReceiveRequestMultiError) AllErrors() []error { return m }

// ReceiveRequestValidationError is the validation error returned by
// ReceiveRequest.Validate if the designated constraints aren't met.
type ReceiveRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ReceiveRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ReceiveRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ReceiveRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ReceiveRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ReceiveRequestValidationError) ErrorName() string { return "ReceiveRequestValidationError" }

// Error satisfies the builtin error interface
func (e ReceiveRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sReceiveRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ReceiveRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ReceiveRequestValidationError{}

// Validate checks the field values on NftApprovals with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *NftApprovals) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on NftApprovals with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in NftApprovalsMultiError, or
// nil if none found.
func (m *NftApprovals) ValidateAll() error {
	return m.validate(true)
}

func (m *NftApprovals) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetERC721() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, NftApprovalsValidationError{
						field:  fmt.Sprintf("ERC721[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, NftApprovalsValidationError{
						field:  fmt.Sprintf("ERC721[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return NftApprovalsValidationError{
					field:  fmt.Sprintf("ERC721[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	for idx, item := range m.GetERC1155() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, NftApprovalsValidationError{
						field:  fmt.Sprintf("ERC1155[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, NftApprovalsValidationError{
						field:  fmt.Sprintf("ERC1155[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return NftApprovalsValidationError{
					field:  fmt.Sprintf("ERC1155[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return NftApprovalsMultiError(errors)
	}

	return nil
}

// NftApprovalsMultiError is an error wrapping multiple validation errors
// returned by NftApprovals.ValidateAll() if the designated constraints aren't met.
type NftApprovalsMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m NftApprovalsMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m NftApprovalsMultiError) AllErrors() []error { return m }

// NftApprovalsValidationError is the validation error returned by
// NftApprovals.Validate if the designated constraints aren't met.
type NftApprovalsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e NftApprovalsValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e NftApprovalsValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e NftApprovalsValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e NftApprovalsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e NftApprovalsValidationError) ErrorName() string { return "NftApprovalsValidationError" }

// Error satisfies the builtin error interface
func (e NftApprovalsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sNftApprovals.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = NftApprovalsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = NftApprovalsValidationError{}

// Validate checks the field values on Abi with the rules defined in the proto
// definition for this message. If any rules are violated, the first error
// encountered is returned, or nil if there are no violations.
func (m *Abi) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Abi with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in AbiMultiError, or nil if none found.
func (m *Abi) ValidateAll() error {
	return m.validate(true)
}

func (m *Abi) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetInputs() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, AbiValidationError{
						field:  fmt.Sprintf("Inputs[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, AbiValidationError{
						field:  fmt.Sprintf("Inputs[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return AbiValidationError{
					field:  fmt.Sprintf("Inputs[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for Name

	// no validation rules for Anonymous

	// no validation rules for Type

	if len(errors) > 0 {
		return AbiMultiError(errors)
	}

	return nil
}

// AbiMultiError is an error wrapping multiple validation errors returned by
// Abi.ValidateAll() if the designated constraints aren't met.
type AbiMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AbiMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AbiMultiError) AllErrors() []error { return m }

// AbiValidationError is the validation error returned by Abi.Validate if the
// designated constraints aren't met.
type AbiValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AbiValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AbiValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AbiValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AbiValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AbiValidationError) ErrorName() string { return "AbiValidationError" }

// Error satisfies the builtin error interface
func (e AbiValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAbi.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AbiValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AbiValidationError{}

// Validate checks the field values on Inputs with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Inputs) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Inputs with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in InputsMultiError, or nil if none found.
func (m *Inputs) ValidateAll() error {
	return m.validate(true)
}

func (m *Inputs) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Indexed

	// no validation rules for Name

	// no validation rules for InternalType

	// no validation rules for Type

	if len(errors) > 0 {
		return InputsMultiError(errors)
	}

	return nil
}

// InputsMultiError is an error wrapping multiple validation errors returned by
// Inputs.ValidateAll() if the designated constraints aren't met.
type InputsMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m InputsMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m InputsMultiError) AllErrors() []error { return m }

// InputsValidationError is the validation error returned by Inputs.Validate if
// the designated constraints aren't met.
type InputsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e InputsValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e InputsValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e InputsValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e InputsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e InputsValidationError) ErrorName() string { return "InputsValidationError" }

// Error satisfies the builtin error interface
func (e InputsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sInputs.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = InputsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = InputsValidationError{}

// Validate checks the field values on Txs with the rules defined in the proto
// definition for this message. If any rules are violated, the first error
// encountered is returned, or nil if there are no violations.
func (m *Txs) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Txs with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in TxsMultiError, or nil if none found.
func (m *Txs) ValidateAll() error {
	return m.validate(true)
}

func (m *Txs) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ReceiptGasUsed

	// no validation rules for TransactionIndex

	// no validation rules for Type

	// no validation rules for Nonce

	// no validation rules for ToAddress

	// no validation rules for Input

	// no validation rules for R

	// no validation rules for S

	// no validation rules for ReceiptCumulativeGasUsed

	// no validation rules for V

	// no validation rules for Gas

	// no validation rules for FromAddress

	// no validation rules for Value

	// no validation rules for Hash

	// no validation rules for ReceiptStatus

	// no validation rules for GasPrice

	if len(errors) > 0 {
		return TxsMultiError(errors)
	}

	return nil
}

// TxsMultiError is an error wrapping multiple validation errors returned by
// Txs.ValidateAll() if the designated constraints aren't met.
type TxsMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m TxsMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m TxsMultiError) AllErrors() []error { return m }

// TxsValidationError is the validation error returned by Txs.Validate if the
// designated constraints aren't met.
type TxsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TxsValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TxsValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TxsValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TxsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TxsValidationError) ErrorName() string { return "TxsValidationError" }

// Error satisfies the builtin error interface
func (e TxsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTxs.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TxsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TxsValidationError{}

// Validate checks the field values on Block with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Block) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Block with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in BlockMultiError, or nil if none found.
func (m *Block) ValidateAll() error {
	return m.validate(true)
}

func (m *Block) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Number

	// no validation rules for Hash

	// no validation rules for Timestamp

	if len(errors) > 0 {
		return BlockMultiError(errors)
	}

	return nil
}

// BlockMultiError is an error wrapping multiple validation errors returned by
// Block.ValidateAll() if the designated constraints aren't met.
type BlockMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m BlockMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m BlockMultiError) AllErrors() []error { return m }

// BlockValidationError is the validation error returned by Block.Validate if
// the designated constraints aren't met.
type BlockValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e BlockValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e BlockValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e BlockValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e BlockValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e BlockValidationError) ErrorName() string { return "BlockValidationError" }

// Error satisfies the builtin error interface
func (e BlockValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sBlock.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = BlockValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = BlockValidationError{}

// Validate checks the field values on Logs with the rules defined in the proto
// definition for this message. If any rules are violated, the first error
// encountered is returned, or nil if there are no violations.
func (m *Logs) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Logs with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in LogsMultiError, or nil if none found.
func (m *Logs) ValidateAll() error {
	return m.validate(true)
}

func (m *Logs) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Topic1

	// no validation rules for Topic2

	// no validation rules for LogIndex

	// no validation rules for Address

	// no validation rules for Topic0

	// no validation rules for Data

	// no validation rules for Topic3

	// no validation rules for TransactionHash

	if len(errors) > 0 {
		return LogsMultiError(errors)
	}

	return nil
}

// LogsMultiError is an error wrapping multiple validation errors returned by
// Logs.ValidateAll() if the designated constraints aren't met.
type LogsMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m LogsMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m LogsMultiError) AllErrors() []error { return m }

// LogsValidationError is the validation error returned by Logs.Validate if the
// designated constraints aren't met.
type LogsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e LogsValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e LogsValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e LogsValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e LogsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e LogsValidationError) ErrorName() string { return "LogsValidationError" }

// Error satisfies the builtin error interface
func (e LogsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sLogs.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = LogsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = LogsValidationError{}
